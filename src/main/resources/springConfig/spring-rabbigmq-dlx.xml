<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!--利用rabbitmq的TTL和延迟队列，实现延迟通知任务的例子
        1、申明了一个订单通知服务的队列  queue_Notify
        2、申明了一个延迟队列Notify_delay_15s，给整个队列设置消息过期时间 为15秒  ——————》 queue ttl  例子
        3、申明了一个延迟队列Notify_delay_30s  给发送到这个队列的消息，消息本身设置过期时间 ————————》  message ttl  例子
        4、当消息发送到2、3队列的时候，达到了过期时间，即转发到订单通知服务工作队列 1、
        5、给队列1 配置消费者服务工作监听，即可完成延迟任务的结果。
    -->

    <!-- ################ 订单通知服务消费者配置 ################ -->
    <!--队列声明-->
    <rabbit:queue id="queue_Notify" name="queue_Notify" durable="true" auto-delete="false" exclusive="false"/>

    <!-- 订单通知服务消费者 exchange -->
    <rabbit:direct-exchange name="trade_direct" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="queue_Notify" key="TradePayNotify"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!-- 订单通知监听处理器 -->
    <bean id="notifyConsumerListener" class="org.seckill.rabbitmqListener.notify.NotifyConsumerListener"/>
    <!--订单消息队列确认回调-->
    <bean id="notifyConfirmCallBackListener" class="org.seckill.rabbitmqListener.notify.NotifyConfirmCallBackListener"></bean>
    <!--订单消息队列消息发送失败回调-->
    <bean id="notifyFailedCallBackListener" class="org.seckill.rabbitmqListener.notify.NotifyFailedCallBackListener"></bean>

    <!-- 监听器acknowledge=manual表示手工确认消息已处理（异常时可以不确认消息），auto表示自动确认（只要不抛出异常，消息就会被消费） -->
    <rabbit:listener-container connection-factory="connectionFactory" acknowledge="manual">
        <rabbit:listener queues="queue_Notify" ref="notifyConsumerListener"/>
    </rabbit:listener-container>

    <!--*****************************************分割线*********************************************************-->

    <!-- ################ 延迟队列生产者配置 ################ -->
    <rabbit:template id="rabbitTemplateDelay" mandatory="true" exchange="trade_direct_delay"
                     connection-factory="connectionFactory"
                     confirm-callback="notifyConfirmCallBackListener"
                     return-callback="notifyFailedCallBackListener"
                     message-converter="jsonMessageConverter"/>

    <!--配置生产消息的延迟队列操作主体类-->
    <bean id="delayMQProducerImpl" class="org.seckill.utils.rabbitmq.Impl.MQProducerImpl">
        <property name="rabbitTemplate" ref="rabbitTemplateDelay"></property>
    </bean>

    <!--申明一个延迟队列，给整个队列的消息设置消息过期时间 x-message-ttl 2分钟
        当消息达到过期时间的时候，rabbitmq将会把消息重新定位转发到其它的队列中去,本例子转发到
        exchange:trade_direct
        routing-key:TradePayNotify
        满足如上两点的队列中去即为：queue_Notify
    -->
    <rabbit:queue id="Notify_delay_2m" name="Notify_delay_2m" durable="true" auto-delete="false"
                  exclusive="false">
        <rabbit:queue-arguments>
            <entry key="x-message-ttl" value="120000" value-type="java.lang.Long"/>
            <entry key="x-dead-letter-exchange" value="trade_direct"/>
            <entry key="x-dead-letter-routing-key" value="TradePayNotify"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!--申明一个延迟队列，在发送消息的时候给消息设置过期时间 3分钟
           当消息达到过期时间的时候，rabbitmq将会把消息重新定位转发到其它的队列中去,本例子转发到
           exchange:trade_direct
           routing-key:TradePayNotify
           满足如上两点的队列中去即为：queue_Notify
    -->
    <rabbit:queue id="Notify_delay_3m" name="Notify_delay_3m" durable="true" auto-delete="false"
                  exclusive="false">
        <rabbit:queue-arguments>
            <entry key="x-dead-letter-exchange" value="trade_direct"/>
            <entry key="x-dead-letter-routing-key" value="TradePayNotify"/>
        </rabbit:queue-arguments>
    </rabbit:queue>

    <!-- 延迟队列工作的 exchange -->
    <rabbit:direct-exchange name="trade_direct_delay" durable="true" auto-delete="false">
        <rabbit:bindings>
            <rabbit:binding queue="Notify_delay_2m" key="TradePayNotify_delay_2m"/>
            <rabbit:binding queue="Notify_delay_3m" key="TradePayNotify_delay_3m"/>
        </rabbit:bindings>
    </rabbit:direct-exchange>

</beans>